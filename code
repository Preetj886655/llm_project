!pip install pdfplumber
# Role: Installs the pdfplumber Python library.

# Purpose: Lets you read and extract text, tables, and metadata from PDF files. Often used in document-processing or OCR workflows.

# Example use: Extracting text from an uploaded PDF for NLP or search.


!pip install tiktoken
# Role: Installs the tiktoken library from OpenAI.

# Purpose: Efficiently tokenizes text into the format used by OpenAI models (counts tokens, converts text to token IDs, etc.).

# Example use: Checking token length before sending text to GPT to avoid exceeding the model’s context limit.
!pip install sentence_transformers
# Role: Installs the sentence-transformers library.

# Purpose: Provides pre-trained models to create sentence embeddings — numerical vectors representing semantic meaning.

# Example use: Building a semantic search engine or clustering similar sentences/documents.


!pip install faiss-cpu
# Role: Installs the CPU version of FAISS (Facebook AI Similarity Search).

# Purpose: Lets you store and search large collections of vectors (like embeddings) efficiently.

# Example use: Finding the top N most similar documents to a query embedding.
!pip install openrouter

# Role: Installs the openrouter Python package.

# Purpose: Allows your Python code to connect to the OpenRouter API — a service that provides access to multiple LLM providers via a unified API.

# Example use: Sending prompts to GPT-4, Claude, or other LLMs via OpenRouter.

import pdfplumber
import numpy as np
import requests
import tiktoken
from sentence_transformers import SentenceTransformer
import faiss

pdf_path = "/content/AIML-Driven Automated Feature Detection Change Analysis of Glacial Lakes, Road Networks, and Urban Drainage Systems Team GeoSense Advanced Remote Sensing Solutions 2024 Technical Proposal_compressed.pdf"
OPENROUTER_API_KEY = "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"  # Replace this with your OpenRouter API key
MODEL_NAME = "meta-llama/llama-3-70b-instruct"  # You can try others too


print("📄 Extracting text from PDF...")


with pdfplumber.open(pdf_path) as pdf:
    text = "\n".join(page.extract_text() for page in pdf.pages if page.extract_text())


# === STEP 2: Split text using tiktoken ===
def chunk_text(text, model_name="gpt-3.5-turbo", chunk_tokens=500, overlap_tokens=50):
    enc = tiktoken.encoding_for_model(model_name)
    tokens = enc.encode(text)

    chunks = []
    start = 0
    while start < len(tokens):
        end = start + chunk_tokens
        chunk = enc.decode(tokens[start:end])
        chunks.append(chunk)
        start += chunk_tokens - overlap_tokens

    return chunks

print("🧠 Splitting text using tiktoken...")
chunks = chunk_text(text)



# === STEP 3: Embed chunks ===
def embed_chunks(chunks, model):
    return model.encode(chunks)

print("🔍 Embedding chunks...")
embed_model = SentenceTransformer("all-MiniLM-L6-v2")
embeddings = embed_chunks(chunks, embed_model)

# === STEP 4: Build FAISS index ===
def build_faiss_index(embeddings):
    index = faiss.IndexFlatL2(embeddings.shape[1])
    index.add(np.array(embeddings))
    return index

print("📦 Building FAISS index...")
index = build_faiss_index(np.array(embeddings))

# === STEP 5: Answer query using OpenRouter ===
def answer_query_openrouter(query, embed_model, chunks, index, k=3):
    query_embedding = embed_model.encode([query])
    D, I = index.search(np.array(query_embedding), k)

    context = "\n\n".join([chunks[i] for i in I[0]])
    prompt = f"""You are a helpful assistant. Answer the following customer query using the insurance text below.

Insurance Text:
{context}

Question: {query}
Answer:"""

    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json"
    }

    payload = {
        "model": MODEL_NAME,
        "messages": [
            {"role": "user", "content": prompt}
        ],
        "temperature": 0.2,
        "max_tokens": 500
    }

    response = requests.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=payload)

    if response.status_code == 200:
        return response.json()['choices'][0]['message']['content']
    else:
        print(f"❌ OpenRouter API Error {response.status_code}: {response.text}")
        return "Error occurred."

# === INTERACTIVE LOOP ===
while True:
    query = input("\n💬 Ask your question about the PDF (or type 'exit'): ")
    if query.lower() == "exit":
        break
    print("🤖 Thinking...")
    answer = answer_query_openrouter(query, embed_model, chunks, index)
    print(f"📢 Answer: {answer}")

